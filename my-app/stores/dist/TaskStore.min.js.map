{"version":3,"sources":["TaskStore.ts"],"names":["zustand_1","require","isServer","window","getSavedTasks","tasksJSON","localStorage","getItem","JSON","parse","saveTasks","tasks","setItem","stringify","exports","useTaskStore","create","set","addTask","task","state","updatedTasks","__spreadArrays","deleteTask","taskId","filter","id","updateTaskTitle","title","map","__assign","updateTaskDescription","description","updateTaskStatus","status","updateTask","updatedTask"],"mappings":"yfAAA,IAAAA,UAAAC,QAAA,WAGMC,SAA6B,oBAAXC,OAElBC,cAAgB,WACpB,GAAIF,SACF,MAAO,GAGT,IAAMG,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,IAGvCK,UAAY,SAACC,GACZT,UACHI,aAAaM,QAAQ,QAASJ,KAAKK,UAAUF,KAcpCG,QAAAC,aAAef,UAAAgB,OAAuB,SAACC,GAAQ,MAAA,CAC1DN,MAAOP,gBACPc,QAAS,SAACC,GACRF,EAAI,SAACG,GACH,IAAMC,EAAYC,eAAOF,EAAMT,MAAK,CAAEQ,IAEtC,OADAT,UAAUW,GACH,CAAEV,MAAOU,MAGpBE,WAAY,SAACC,GACXP,EAAI,SAACG,GACH,IAAMC,EAAeD,EAAMT,MAAMc,OAAO,SAACN,GAAS,OAAAA,EAAKO,KAAOF,IAE9D,OADAd,UAAUW,GACH,CAAEV,MAAOU,MAGpBM,gBAAiB,SAACH,EAAQI,GACxBX,EAAI,SAACG,GACH,IAAMC,EAAeD,EAAMT,MAAMkB,IAAI,SAACV,GACpC,OAAAA,EAAKO,KAAOF,EAAQM,SAAAA,SAAA,GAAMX,GAAI,CAAES,MAAKA,IAAKT,IAG5C,OADAT,UAAUW,GACH,CAAEV,MAAOU,MAGpBU,sBAAuB,SAACP,EAAQQ,GAC9Bf,EAAI,SAACG,GACH,IAAMC,EAAeD,EAAMT,MAAMkB,IAAI,SAACV,GACpC,OAAAA,EAAKO,KAAOF,EAAQM,SAAAA,SAAA,GAAMX,GAAI,CAAEa,YAAWA,IAAKb,IAGlD,OADAT,UAAUW,GACH,CAAEV,MAAOU,MAGpBY,iBAAkB,SAACT,EAAQU,GACzBjB,EAAI,SAACG,GACH,IAAMC,EAAeD,EAAMT,MAAMkB,IAAI,SAACV,GACpC,OAAAA,EAAKO,KAAOF,EAAQM,SAAAA,SAAA,GAAMX,GAAI,CAAEe,OAAMA,IAAKf,IAG7C,OADAT,UAAUW,GACH,CAAEV,MAAOU,MAGpBc,WAAY,SAACX,EAAQY,GACnBnB,EAAI,SAACG,GACH,IAAMC,EAAeD,EAAMT,MAAMkB,IAAI,SAACV,GACpC,OAAAA,EAAKO,KAAOF,EAAQM,SAAA,GAAMM,GAAgBjB,IAG5C,OADAT,UAAUW,GACH,CAAEV,MAAOU","file":"TaskStore.min.js","sourcesContent":["import {create} from \"zustand\";\r\nimport  Task  from \"../models/TaskModel\";\r\n\r\nconst isServer = typeof window === \"undefined\";\r\n\r\nconst getSavedTasks = ():typeof Task[] => {\r\n  if (isServer) {\r\n    return [];\r\n  }\r\n\r\n  const tasksJSON = localStorage.getItem(\"tasks\");\r\n  return tasksJSON ? JSON.parse(tasksJSON) : [];\r\n};\r\n\r\nconst saveTasks = (tasks:typeof Task[]) => {\r\n  if (!isServer) {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }\r\n};\r\n\r\ninterface TaskStoreState {\r\n  tasks:typeof Task[];\r\n  addTask: (task:typeof Task) => void;\r\n  deleteTask: (taskId: string) => void;\r\n  updateTaskTitle: (taskId: string, title: string) => void;\r\n  updateTaskDescription: (taskId: string, description: string) => void;\r\n  updateTaskStatus: (taskId: string, status: string) => void;\r\n  updateTask: (taskId: string, updatedTask:typeof Task) => void;\r\n}\r\n\r\nexport const useTaskStore = create<TaskStoreState>((set) => ({\r\n  tasks: getSavedTasks(),\r\n  addTask: (task) => {\r\n    set((state) => {\r\n      const updatedTasks = [...state.tasks, task];\r\n      saveTasks(updatedTasks);\r\n      return { tasks: updatedTasks };\r\n    });\r\n  },\r\n  deleteTask: (taskId) => {\r\n    set((state) => {\r\n      const updatedTasks = state.tasks.filter((task) => task.id !== taskId);\r\n      saveTasks(updatedTasks);\r\n      return { tasks: updatedTasks };\r\n    });\r\n  },\r\n  updateTaskTitle: (taskId, title) => {\r\n    set((state) => {\r\n      const updatedTasks = state.tasks.map((task) =>\r\n        task.id === taskId ? { ...task, title } : task\r\n      );\r\n      saveTasks(updatedTasks);\r\n      return { tasks: updatedTasks };\r\n    });\r\n  },\r\n  updateTaskDescription: (taskId, description) => {\r\n    set((state) => {\r\n      const updatedTasks = state.tasks.map((task) =>\r\n        task.id === taskId ? { ...task, description } : task\r\n      );\r\n      saveTasks(updatedTasks);\r\n      return { tasks: updatedTasks };\r\n    });\r\n  },\r\n  updateTaskStatus: (taskId, status) => {\r\n    set((state) => {\r\n      const updatedTasks = state.tasks.map((task) =>\r\n        task.id === taskId ? { ...task, status } : task\r\n      );\r\n      saveTasks(updatedTasks);\r\n      return { tasks: updatedTasks };\r\n    });\r\n  },\r\n  updateTask: (taskId, updatedTask) => {\r\n    set((state) => {\r\n      const updatedTasks = state.tasks.map((task) =>\r\n        task.id === taskId ? { ...updatedTask } : task\r\n      );\r\n      saveTasks(updatedTasks);\r\n      return { tasks: updatedTasks };\r\n    });\r\n  },\r\n}));\r\n\r\n\r\n"]}