{"version":3,"sources":["TaskList.tsx"],"names":["react_1","require","mobx_react_lite_1","TaskStore_1","TaskItem_1","TaskEditForm_1","dynamic_1","TaskList","observer","handleCancelEdit","setEditableTaskId","taskStore","useTaskStore","_a","useState","editableTaskId","todoTasks","tasks","filter","task","status","length","progressTasks","closedTasks","React","createElement","map","key","id","onSave","title","description","taskId","updateTask","handleSaveEdit","onCancel","onEditClick","handleEditClick","onDeleteClick","deleteTask","exports","Promise","resolve","ssr"],"mappings":"mCAAA,IAAAA,QAAAC,QAAA,SACAC,kBAAAD,QAAA,mBACAE,YAAAF,QAAA,uBACAG,WAAAH,QAAA,cACAI,eAAAJ,QAAA,kBACAK,UAAAL,QAAA,gBAEMM,SAAWL,kBAAAM,SAAS,WAQC,SAAnBC,IACJC,EAAkB,MARpB,IAAMC,EAAYR,YAAAS,eACZC,EAAAb,QAAAc,SAAA,MAACC,EAAAF,EAAA,GAAgBH,EAAAG,EAAA,GAejBG,EAAYL,EAAUM,MAAMC,OAAO,SAACC,GAAS,MAAgB,UAAhBA,EAAKC,SAAoBC,OACtEC,EAAgBX,EAAUM,MAAMC,OAAO,SAACC,GAAS,MAAgB,aAAhBA,EAAKC,SAAuBC,OAC7EE,EAAcZ,EAAUM,MAAMC,OAAO,SAACC,GAAS,MAAgB,WAAhBA,EAAKC,SAAqBC,OAE/E,OACEG,MAAAC,cAAA,MAAA,KACED,MAAAC,cAAA,KAAA,KAAA,UACAD,MAAAC,cAAA,MAAA,qBAAmBd,EAAUM,MAAMI,QACnCG,MAAAC,cAAA,MAAA,oBAAkBT,GAClBQ,MAAAC,cAAA,MAAA,wBAAsBH,GACtBE,MAAAC,cAAA,MAAA,sBAAoBF,GACnBZ,EAAUM,MAAMS,IAAI,SAACP,GAAS,OAC7BK,MAAAC,cAAA,MAAA,CAAKE,IAAKR,EAAKS,IACZb,IAAmBI,EAAKS,GACvBJ,MAAAC,cAACpB,eAAA,QAAY,CACXc,KAAMA,EACNU,OAAQ,SAACC,EAAOC,GAAgB,OArBrB,SAACC,EAAgBF,EAAeC,GACrDpB,EAAUsB,WAAWD,EAAQF,EAAOC,GACpCrB,EAAkB,MAmBwBwB,CAAef,EAAKS,GAAIE,EAAOC,IAC/DI,SAAU1B,IAGZe,MAAAC,cAACrB,WAAA,QAAQ,CACPe,KAAMA,EACNiB,YAAa,WAAM,OAnCP,SAACJ,GACvBtB,EAAkBsB,GAkCWK,CAAgBlB,EAAKS,KACxCU,cAAe,WAAM,OAAA3B,EAAU4B,WAAWpB,EAAKS,aAS7DY,QAAA,QAAelC,UAAA,QAAQ,WAAM,OAAAmC,QAAQC,QAAQnC,WAAW,CAAEoC,KAAK","file":"TaskList.min.js","sourcesContent":["import { useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useTaskStore } from \"../stores/TaskStore\";\r\nimport TaskItem from \"./TaskItem\";\r\nimport TaskEditForm from \"./TaskEditForm\";\r\nimport dynamic from \"next/dynamic\";\r\n\r\nconst TaskList = observer(() => {\r\n  const taskStore = useTaskStore();\r\n  const [editableTaskId, setEditableTaskId] = useState<string | null>(null);\r\n\r\n  const handleEditClick = (taskId: string) => {\r\n    setEditableTaskId(taskId);\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditableTaskId(null);\r\n  };\r\n\r\n  const handleSaveEdit = (taskId: string, title: string, description: string) => {\r\n    taskStore.updateTask(taskId, title, description);\r\n    setEditableTaskId(null);\r\n  };\r\n\r\n  const todoTasks = taskStore.tasks.filter((task) => task.status === \"To Do\").length;\r\n  const progressTasks = taskStore.tasks.filter((task) => task.status === \"Progress\").length;\r\n  const closedTasks = taskStore.tasks.filter((task) => task.status === \"Closed\").length;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Tasks:</h2>\r\n      <div>Total Tasks: {taskStore.tasks.length}</div>\r\n      <div>Todo Tasks: {todoTasks}</div>\r\n      <div>Progress Tasks: {progressTasks}</div>\r\n      <div>Closed Tasks: {closedTasks}</div>\r\n      {taskStore.tasks.map((task) => (\r\n        <div key={task.id}>\r\n          {editableTaskId === task.id ? (\r\n            <TaskEditForm\r\n              task={task}\r\n              onSave={(title, description) => handleSaveEdit(task.id, title, description)}\r\n              onCancel={handleCancelEdit}\r\n            />\r\n          ) : (\r\n            <TaskItem\r\n              task={task}\r\n              onEditClick={() => handleEditClick(task.id)}\r\n              onDeleteClick={() => taskStore.deleteTask(task.id)}\r\n            />\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default dynamic(() => Promise.resolve(TaskList), { ssr: false });\r\n"]}